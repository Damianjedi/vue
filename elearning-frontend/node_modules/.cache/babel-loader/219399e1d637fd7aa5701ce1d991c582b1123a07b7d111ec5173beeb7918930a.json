{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nimport { format } from 'date-fns';\nexport default {\n  name: 'HomePage',\n  data() {\n    return {\n      posts: [],\n      newPostContent: '',\n      newCommentContent: {},\n      error: ''\n    };\n  },\n  async created() {\n    await this.fetchPosts();\n  },\n  methods: {\n    formatDate(date) {\n      return format(new Date(date), ' HH:mm dd.MM.yyyy');\n    },\n    async fetchPosts() {\n      try {\n        const response = await axios.get('https://localhost:7153/api/elearning/posts');\n        this.posts = response.data.map(post => ({\n          ...post,\n          fileName: post.fileName || null\n        }));\n      } catch (error) {\n        this.error = 'Error fetching posts';\n        console.error(error);\n      }\n    },\n    async createPost() {\n      try {\n        const token = localStorage.getItem('token');\n        if (!token) {\n          this.error = 'You must be logged in to create a post';\n          return;\n        }\n        const gg = ('FileContentType', '', 'FileName', '', 'FileData', new Blob());\n        const formData = new FormData();\n        formData.append('Content', this.newPostContent);\n        const fileInput = document.getElementById('fileInput');\n        if (fileInput.files.length > 0) {\n          formData.append('File', fileInput.files[0]);\n        } else {\n          formData.append('File', gg);\n        }\n        const response = await axios.post('https://localhost:7153/api/elearning/posts', formData, {\n          headers: {\n            Authorization: `Bearer ${token}`,\n            'Content-Type': 'multipart/form-data'\n          }\n        });\n        console.log(response.data);\n        this.posts.push(response.data);\n        this.newPostContent = '';\n        window.location.reload();\n      } catch (error) {\n        this.error = error.response ? error.response.data : 'Error creating post';\n        console.error(error);\n      }\n    },\n    async createComment(postId) {\n      try {\n        const token = localStorage.getItem('token');\n        if (!token) {\n          this.error = 'You must be logged in to comment';\n          return;\n        }\n        const response = await axios.post(`https://localhost:7153/api/elearning/posts/${postId}/comments`, {\n          content: this.newCommentContent[postId]\n        }, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        const post = this.posts.find(p => p.id === postId);\n        post.comments.push(response.data);\n        this.$set(this.newCommentContent, postId, '');\n        window.location.reload();\n      } catch (error) {\n        this.error = error.response ? error.response.data : 'Error creating comment';\n        console.error(error);\n        window.location.reload();\n      }\n    },\n    isImageFile(fileName) {\n      const extension = fileName.split('.').pop().toLowerCase();\n      return ['jpg', 'jpeg', 'png'].includes(extension);\n    }\n  }\n};","map":{"version":3,"names":["axios","format","name","data","posts","newPostContent","newCommentContent","error","created","fetchPosts","methods","formatDate","date","Date","response","get","map","post","fileName","console","createPost","token","localStorage","getItem","gg","Blob","formData","FormData","append","fileInput","document","getElementById","files","length","headers","Authorization","log","push","window","location","reload","createComment","postId","content","find","p","id","comments","$set","isImageFile","extension","split","pop","toLowerCase","includes"],"sources":["C:\\Users\\Damian\\Desktop\\vue\\elearning-frontend\\src\\components\\Home.vue"],"sourcesContent":["<template>\r\n  <div class=\"mainSection\">\r\n    <h1>Posty</h1>\r\n    <form class=\"postPublish\" @submit.prevent=\"createPost\">\r\n      <textarea v-model=\"newPostContent\" placeholder=\"Napisz post...\"></textarea>\r\n      <input type=\"file\" id=\"fileInput\" />\r\n      <button type=\"submit\">Opublikuj</button>\r\n    </form>\r\n    <div v-if=\"error\" class=\"error\">{{ error }}</div>\r\n    <div v-for=\"post in posts\" :key=\"post.id\" class=\"post\">\r\n      <p>{{ post.content }}</p>\r\n      <small>Opublikowano przez {{ post.user.firstName }} dnia {{ formatDate(post.createdAt) }}</small>\r\n      <div v-if=\"post.fileName\">\r\n        <div v-if=\"isImageFile(post.fileName)\">\r\n          <img :src=\"`https://localhost:7153/api/elearning/posts/${post.id}/file`\" :alt=\"post.fileName\" />\r\n        </div>\r\n        <div v-else>\r\n          <a :href=\"`https://localhost:7153/api/elearning/posts/${post.id}/file`\" target=\"_blank\">{{ post.fileName }}</a>\r\n        </div>\r\n      </div>\r\n      <form class=\"commentPublish\" @submit.prevent=\"createComment(post.id)\">\r\n        <textarea v-model=\"newCommentContent[post.id]\" placeholder=\"Napisz komentarz...\"></textarea>\r\n        <button type=\"submit\">Opublikuj</button>\r\n      </form>\r\n      <div v-for=\"comment in post.comments\" :key=\"comment.id\" class=\"comment\">\r\n        <p>{{ comment.content }}</p>\r\n        <small>Skomentowano przez <span style=\"font-weight: bold\"> {{ comment.user.firstName }} </span> dnia {{ formatDate(comment.createdAt) }}</small>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\nimport { format } from 'date-fns';\r\n\r\nexport default {\r\n  name:'HomePage',\r\n  data() {\r\n    return {\r\n      posts: [],\r\n      newPostContent: '',\r\n      newCommentContent: {},\r\n      error: ''\r\n    };\r\n  },\r\n  async created() {\r\n    await this.fetchPosts();\r\n  },\r\n  methods: {\r\n    formatDate(date) {\r\n      return format(new Date(date), ' HH:mm dd.MM.yyyy')\r\n    },\r\n    async fetchPosts() {\r\n      try {\r\n        const response = await axios.get('https://localhost:7153/api/elearning/posts');\r\n        this.posts = response.data.map(post => ({\r\n          ...post,\r\n          fileName: post.fileName || null\r\n        }));\r\n      } catch (error) {\r\n        this.error = 'Error fetching posts';\r\n        console.error(error);\r\n      }\r\n    },\r\n    async createPost() {\r\n      try {\r\n        const token = localStorage.getItem('token');\r\n        if (!token) {\r\n          this.error = 'You must be logged in to create a post';\r\n          return;\r\n        }\r\n        const gg = ('FileContentType', '', 'FileName', '', 'FileData', new Blob());\r\n        const formData = new FormData();\r\n        formData.append('Content', this.newPostContent);\r\n        const fileInput = document.getElementById('fileInput'); \r\n        if (fileInput.files.length > 0) {\r\n        formData.append('File', fileInput.files[0]);\r\n        } else {\r\n            \r\n            formData.append('File', gg);\r\n        }\r\n        const response = await axios.post('https://localhost:7153/api/elearning/posts', \r\n          formData,\r\n          {headers: {Authorization: `Bearer ${token}`, \r\n            'Content-Type': 'multipart/form-data' } }\r\n          );\r\n          console.log(response.data);\r\n        this.posts.push(response.data);\r\n        this.newPostContent = '';\r\n        window.location.reload()\r\n      } catch (error) {\r\n        this.error = error.response ? error.response.data : 'Error creating post';\r\n        console.error(error);\r\n      }\r\n    },\r\n    async createComment(postId) {\r\n      try {\r\n        const token = localStorage.getItem('token');\r\n        if (!token) {\r\n          this.error = 'You must be logged in to comment';\r\n          return;\r\n        }\r\n        const response = await axios.post(`https://localhost:7153/api/elearning/posts/${postId}/comments`, \r\n          { content: this.newCommentContent[postId] }, \r\n          { headers: { Authorization: `Bearer ${token}` } }\r\n        );\r\n        const post = this.posts.find(p => p.id === postId);\r\n        post.comments.push(response.data);\r\n        this.$set(this.newCommentContent, postId, '');\r\n        window.location.reload()\r\n      } catch (error) {\r\n        this.error = error.response ? error.response.data : 'Error creating comment';\r\n        console.error(error);\r\n        window.location.reload()\r\n      }\r\n    },\r\n    isImageFile(fileName) {\r\n      const extension = fileName.split('.').pop().toLowerCase();\r\n      return ['jpg', 'jpeg', 'png'].includes(extension);\r\n    },\r\n  }\r\n};\r\n</script>\r\n\r\n<!-- style css -->\r\n\r\n<style>\r\n.mainSection {\r\n  max-width: 600px;\r\n  margin: 0 auto;\r\n  border-radius: 15px;\r\n  padding: 20px;\r\n  background-color: white;\r\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\r\n  margin: 100px auto auto auto;\r\n}\r\n\r\n.header {\r\n  text-align: center;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.post-form {\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.postPublish {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  margin: 20px auto auto auto;\r\n}\r\n\r\n.commentPublish {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  margin: 20px auto auto auto;\r\n}\r\n\r\n#fileInput {\r\n  margin: 10px auto;\r\n}\r\n\r\ntextarea {\r\n  width: 100%;\r\n  max-width: 300px;\r\n  padding: 10px;\r\n  margin-bottom: 10px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 5px;\r\n  resize: none; \r\n}\r\n\r\n.comment-form {\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin-bottom: 20px;\r\n}\r\n\r\nbutton {\r\n  padding: 10px 20px;\r\n  border-radius: 5px;\r\n  background-color: #0047AB;\r\n  color: white;\r\n  border: none;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s;\r\n}\r\n\r\nbutton:hover {\r\n  background-color: #6495ED;\r\n}\r\n\r\n.error {\r\n  color: red;\r\n  margin-bottom: 20px;\r\n  text-align: center;\r\n}\r\n\r\n.post {\r\n  background-color: white;\r\n  padding: 20px;\r\n  border-radius: 10px;\r\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\r\n  margin: 30px auto;\r\n}\r\n\r\n.post-content {\r\n  font-size: 15px;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.post-meta {\r\n  font-size: 12px;\r\n  color: lightgray;\r\n}\r\n\r\n.comment {\r\n  background-color: white;\r\n  padding: 10px;\r\n  border-radius: 10px;\r\n  margin-top: 10px;\r\n}\r\n\r\n.comment-content {\r\n  font-size: 14px;\r\n  margin-bottom: 5px;\r\n}\r\n\r\n.comment-meta {\r\n  font-size: 12px;\r\n  color: lightgray;\r\n}\r\n\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}